#!/bin/bash

# Лог-файл и Excel-отчёт
LOG_FILE="/tmp/clamav_scan.log"
EXCEL_REPORT="/tmp/clamav_report.xlsx"
EMAIL="isa@ultahost.com"
HOSTNAME=$(hostname)

# Отключаем интерактивные диалоги и needrestart
export DEBIAN_FRONTEND=noninteractive
echo 'NEEDRESTART_MODE=a' | sudo tee /etc/needrestart/needrestart.conf > /dev/null

# Проверка на наличие xlsxwriter и установка, если он отсутствует
install_xlsxwriter() {
    if ! python3 -c "import xlsxwriter" &> /dev/null; then
        echo "Python module xlsxwriter not found. Installing..."
        sudo apt-get install -y python3-pip
        pip3 install xlsxwriter
    else
        echo "xlsxwriter module is already installed."
    fi
}

# Определение версии ОС
detect_os() {
    if [ -f /etc/debian_version ]; then
        OS="debian"
    elif [ -f /etc/redhat-release ]; then
        OS="redhat"
    else
        echo "Unsupported OS. Exiting..."
        exit 1
    fi
}

# Функция для установки необходимых пакетов
install_dependencies() {
    echo "Checking if required packages are installed..."

    if ! command -v sendmail &> /dev/null; then
        echo "sendmail not found. Installing..."
        if [ "$OS" == "debian" ]; then
            sudo apt-get update -q
            sudo apt-get install -y -q sendmail clamav clamav-daemon
        elif [ "$OS" == "redhat" ]; then
            sudo yum install -y sendmail epel-release
            sudo yum install -y clamav clamav-update
        fi
    else
        echo "sendmail is already installed."
    fi
}

# Функция для обновления базы данных ClamAV
update_clamav_db() {
    echo "Stopping freshclam service to update database..."
    sudo systemctl stop clamav-freshclam
    sudo pkill freshclam

    echo "Cleaning old ClamAV databases..."
    sudo rm -f /var/lib/clamav/*.cvd
    sudo rm -f /var/lib/clamav/*.cld

    echo "Updating ClamAV database..."
    sudo freshclam

    if [ $? -ne 0 ]; then
        echo "ClamAV database update failed. Retrying..."
        sleep 30
        sudo freshclam
        if [ $? -ne 0 ]; then
            echo "Database update failed after retry. Aborting scan."
            exit 1
        fi
    fi

    echo "Starting freshclam service..."
    sudo systemctl start clamav-freshclam
}

# Функция для выполнения сканирования всех директорий
run_scan() {
    echo "Starting ClamAV scan..."

    directories=(
        "/var/www"
        "/home"
        "/srv"
        "/opt"
        "/var/lib/docker"
        "/var/log"
        "/var/tmp"
        "/tmp"
        "/usr/local"
        "/etc/nginx"
        "/etc/apache2"
        "/var/cache/nginx"
        "/var/cache/apache2"
        "/usr/share/nginx/html"
        "/usr/share/apache2"
        "/usr/local/lib/python3.8"
        "/usr/local/lib/node_modules"
        "/node_modules"
    )

    sudo clamscan -r --infected --max-filesize=50M --max-scansize=500M "${directories[@]}" | tee -a $LOG_FILE

    echo "Scan completed. Log saved to $LOG_FILE"
}

# Функция для создания отчёта в Excel
create_excel_report() {
    echo "Creating Excel report..."

    python3 <<EOF
import xlsxwriter
import datetime

log_file = "$LOG_FILE"
report_file = "$EXCEL_REPORT"

# Чтение логов ClamAV
with open(log_file, "r") as file:
    logs = file.readlines()

# Создание Excel-файла
workbook = xlsxwriter.Workbook(report_file)
worksheet = workbook.add_worksheet("Scan Report")

# Настройка стилей для заголовков и ячеек
header_format = workbook.add_format({'bold': True, 'font_color': 'white', 'bg_color': 'blue'})
infected_format = workbook.add_format({'bg_color': 'red', 'font_color': 'white'})
clean_format = workbook.add_format({'bg_color': 'green', 'font_color': 'white'})

# Заголовки таблицы
headers = ["Date", "Directory", "Scanned Files", "Infected Files", "Status"]
for col_num, header in enumerate(headers):
    worksheet.write(0, col_num, header, header_format)

# Парсинг логов и заполнение Excel таблицы
row = 1
current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
for log in logs:
    if "SCAN SUMMARY" in log:
        worksheet.write(row, 0, current_date)
    if "Scanned files:" in log:
        worksheet.write(row, 2, log.split(":")[1].strip())
    if "Infected files:" in log:
        infected_count = int(log.split(":")[1].strip())
        worksheet.write(row, 3, infected_count)
        if infected_count > 0:
            worksheet.write(row, 4, "Infected", infected_format)
        else:
            worksheet.write(row, 4, "Clean", clean_format)
        row += 1

# Закрываем Excel файл
workbook.close()
EOF
}

# Функция для отправки отчёта
send_report() {
    echo "Sending report to $EMAIL..."

    BODY="ClamAV scan report from $HOSTNAME\n\nPlease find the attached ClamAV scan report in Excel format."

    {
        echo "To: $EMAIL"
        echo "Subject: ClamAV Scan Report"
        echo "MIME-Version: 1.0"
        echo "Content-Type: multipart/mixed; boundary=\"boundary\""
        echo
        echo "--boundary"
        echo "Content-Type: text/plain; charset=\"UTF-8\""
        echo "Content-Transfer-Encoding: 7bit"
        echo
        echo "$BODY"
        echo
        echo "--boundary"
        echo "Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        echo "Content-Disposition: attachment; filename=\"clamav_report.xlsx\""
        echo "Content-Transfer-Encoding: base64"
        echo
        base64 "$EXCEL_REPORT"
        echo
        echo "--boundary--"
    } | sendmail -t

    if [ $? -eq 0 ]; then
        echo "Report successfully sent to $EMAIL"
        rm -f "$EXCEL_REPORT"
    else
        echo "Failed to send report."
    fi
}

# Основная логика скрипта
detect_os
install_xlsxwriter
install_dependencies
update_clamav_db
run_scan
create_excel_report
send_report