#!/bin/bash

# Configuration data
LOG_DIR="/tmp/logs/$(date +%Y-%m-%d)"
CLAMAV_LOG_FILE="$LOG_DIR/clamav_scan.log"
MALDET_LOG_FILE="$LOG_DIR/maldet_scan.log"
ERROR_LOG_FILE="$LOG_DIR/error.log"
HOSTNAME=$(hostname)
SERVER_IP=$(hostname -I | awk '{print $1}')
CHAT_ID="${CHAT_ID:-"-1002317051732"}"
BOT_TOKEN="${BOT_TOKEN:-"7771335446:AAG8HEg0ifpuwm0pV3FM9HaJSHMrfHy1VC0"}"
MESSAGE_THREAD_ID="${MESSAGE_THREAD_ID:-"31"}"
SCAN_DIRECTORIES=("/var/www" "/home" "/opt" "/srv" "/usr/local" "/etc/nginx" "/etc/apache2")
MAX_PARALLEL_SCANS=3  # Max parallel scans

# Create directory for logs
mkdir -p "$LOG_DIR"

# Function to check dependencies
check_dependencies() {
    local missing=""
    for cmd in clamscan maldet curl sha256sum; do
        if ! command -v "$cmd" &> /dev/null; then
            missing="$missing $cmd"
        fi
    done

    if [ -n "$missing" ]; then
        send_telegram_message "⚠️ Error: Missing dependencies:$missing on server $HOSTNAME ($SERVER_IP)."
        echo "Error: Missing dependencies:$missing. Install them before running the script." >> "$ERROR_LOG_FILE"
        exit 1
    fi
}

# Function to send Telegram messages
send_telegram_message() {
    local message="$1"
    curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
        -d chat_id="${CHAT_ID}" \
        -d text="$message" \
        -d parse_mode="Markdown" \
        -d thread_id="${MESSAGE_THREAD_ID}" > /dev/null
}

# Function to check and update the script
update_script() {
    SCRIPT_URL="https://github.com/isa-dagestani/MalwareScan/raw/main/clamav_scan.sh"
    curl -s -L "$SCRIPT_URL" -o /tmp/updated_script.sh

    if file /tmp/updated_script.sh | grep -q "shell script"; then
        if command -v sha256sum &> /dev/null; then
            local current_checksum=$(sha256sum "$0" | awk '{print $1}')
            local new_checksum=$(sha256sum /tmp/updated_script.sh | awk '{print $1}')
            if [ "$current_checksum" != "$new_checksum" ]; then
                chmod +x /tmp/updated_script.sh
                exec /tmp/updated_script.sh
                exit 0
            fi
        fi
    fi
}

# Function to perform parallel scans with a limit on simultaneous scans
run_parallel_scans() {
    local count=0
    for dir in "${SCAN_DIRECTORIES[@]}"; do
        if [ -d "$dir" ]; then
            sudo clamscan -r --infected --detect-pua=yes --heuristic-alerts=yes "$dir" | tee -a "$CLAMAV_LOG_FILE" &
            sudo maldet -a "$dir" >> "$MALDET_LOG_FILE" 2>&1 &
            count=$((count + 2))
            if [ "$count" -ge "$MAX_PARALLEL_SCANS" ]; then
                wait -n
                count=$((count - 2))
            fi
        fi
    done
    wait
}

# Send Telegram notification if threats are detected
send_reports_if_threats() {
    local clamav_found=$(grep -c "FOUND" "$CLAMAV_LOG_FILE" 2>/dev/null || echo "0")
    local maldet_found=$(grep -c "malware detected" "$MALDET_LOG_FILE" 2>/dev/null || echo "0")

    if (( clamav_found > 0 )); then
        local report=$(grep "FOUND" "$CLAMAV_LOG_FILE" | awk -F ':' '{print $1}')
        send_telegram_message "*⚠️ Virus Detected by ClamAV ⚠️* | *Server:* \`$HOSTNAME\` | *IP:* \`$SERVER_IP\` | *Files Detected:* $clamav_found \n🚨 \`\`\`$report\`\`\`"
    fi

    if (( maldet_found > 0 )); then
        local report=$(grep "malware detected" "$MALDET_LOG_FILE")
        send_telegram_message "*⚠️ Malware Detected by Maldet ⚠️* | *Server:* \`$HOSTNAME\` | *IP:* \`$SERVER_IP\` | *Malware Detected:* $maldet_found \n🚨 \`\`\`$report\`\`\`"
    fi
}

# Function to clean up old logs
archive_and_cleanup_logs() {
    find "$LOG_DIR" -type d -mtime +7 -exec tar -czf "$LOG_DIR/archived_logs_$(date +%Y-%m-%d).tar.gz" {} + && \
    find "$LOG_DIR" -type d -mtime +7 -exec rm -rf {} + || echo "Failed to archive and clean old logs" >> "$ERROR_LOG_FILE"
}

# Main logic
send_telegram_message "*🔍 Starting ClamAV and Maldet Scan 🔍* | *Server:* \`$HOSTNAME\` | *IP:* \`$SERVER_IP\`"
check_dependencies          # Check for required dependencies
update_script               # Check and update the script
run_parallel_scans          # Run scans
send_reports_if_threats     # Send reports if threats are found
archive_and_cleanup_logs    # Archive old logs after scanning
send_telegram_message "✅ *Scan Completed* | *Server:* \`$HOSTNAME\` | *IP:* \`$SERVER_IP\`"