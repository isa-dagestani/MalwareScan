#!/bin/bash

# Configuration data
LOG_DIR="/tmp/logs/$(date +%Y-%m-%d)"
CLAMAV_LOG_FILE="$LOG_DIR/clamav_scan.log"
MALDET_LOG_FILE="$LOG_DIR/maldet_scan.log"
HOSTNAME=$(hostname)
SERVER_IP=$(hostname -I | awk '{print $1}')
CHAT_ID="${CHAT_ID:-"-1002317051732"}"
BOT_TOKEN="${BOT_TOKEN:-"7771335446:AAG8HEg0ifpuwm0pV3FM9HaJSHMrfHy1VC0"}"
MESSAGE_THREAD_ID="${MESSAGE_THREAD_ID:-"31"}"
SCAN_DIRECTORIES=("/var/www" "/home" "/opt" "/srv" "/usr/local" "/etc/nginx" "/etc/apache2")
MAX_PARALLEL_SCANS=3  # Max parallel scans
HIGH_LOAD_THRESHOLD=2.0  # CPU load threshold

# Create directory for logs
mkdir -p "$LOG_DIR"

# Display welcome banner
display_banner

# Function to check and update the script
# Function to check and update the script
update_script() {
    SCRIPT_URL="https://example.com/your-script.sh"  # Specify correct URL of the script or Git repository
    echo "Checking for script updates..."
    curl -s -L "$SCRIPT_URL" -o /tmp/updated_script.sh

    # Check if downloaded file is a valid shell script
    if file /tmp/updated_script.sh | grep -q "shell script"; then
        if ! cmp -s /tmp/updated_script.sh "$0"; then
            echo "New version found. Updating..."
            cp /tmp/updated_script.sh "$0" && chmod +x "$0" && exec "$0"
        else
            echo "Script is up-to-date."
        fi
    else
        echo "Error: Downloaded file is not a valid shell script. Update aborted."
    fi
}

# Function to check CPU load before starting scans
check_system_load() {
    load=$(awk '{print $1}' < /proc/loadavg)
    if (( $(echo "$load > $HIGH_LOAD_THRESHOLD" | bc -l) )); then
        echo "High system load detected: $load. Delaying scan."
        sleep 60
        check_system_load
    fi
}

# Function to perform parallel scans with a limit on simultaneous scans
run_parallel_scans() {
    echo "Starting ClamAV and Maldet scans with parallel limit $MAX_PARALLEL_SCANS..."
    count=0
    for dir in "${SCAN_DIRECTORIES[@]}"; do
        if [ -d "$dir" ]; then
            check_system_load  # Check system load before each scan
            echo "Scanning directory: $dir"
            sudo clamscan -r --infected --detect-pua=yes --heuristic-alerts=yes "$dir" | tee -a "$CLAMAV_LOG_FILE" &
            sudo maldet -a "$dir" >> "$MALDET_LOG_FILE" 2>&1 &
            count=$((count + 2))
            if [ "$count" -ge "$MAX_PARALLEL_SCANS" ]; then
                wait -n
                count=$((count - 2))
            fi
        fi
    done
    wait
}

# Send Telegram notification if threats are detected
send_reports_if_threats() {
    clamav_found=$(grep -c "FOUND" "$CLAMAV_LOG_FILE")
    maldet_found=$(grep -c "malware detected" "$MALDET_LOG_FILE")

    if [ "$clamav_found" -gt 0 ]; then
        report=$(grep "FOUND" "$CLAMAV_LOG_FILE" | awk -F ':' '{print $1}')
        message="*‚ö†Ô∏è Virus Detected by ClamAV ‚ö†Ô∏è* | *Server:* \`$HOSTNAME\` | *IP:* \`$SERVER_IP\` | *Files Detected:* $clamav_found \nüö® \`\`\`$report\`\`\`"
        send_telegram_message "$message"
    fi

    if [ "$maldet_found" -gt 0 ]; then
        report=$(grep "malware detected" "$MALDET_LOG_FILE")
        message="*‚ö†Ô∏è Malware Detected by Maldet ‚ö†Ô∏è* | *Server:* \`$HOSTNAME\` | *IP:* \`$SERVER_IP\` | *Malware Detected:* $maldet_found \nüö® \`\`\`$report\`\`\`"
        send_telegram_message "$message"
    fi
}

# Main logic
update_script  # Check and update the script
install_dependencies
check_clamav_daemon
check_swap
send_telegram_message "*üîç ClamAV and Maldet Scan Started üîç* | *Server:* \`$HOSTNAME\` | *IP:* \`$SERVER_IP\`"
update_clamav_db
run_parallel_scans
send_reports_if_threats

# Clean up old logs
find /tmp/logs/ -type d -mtime +7 -exec rm -rf {} +
