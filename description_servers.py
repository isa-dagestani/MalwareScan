import paramiko
import pandas as pd
import os
import subprocess
from datetime import datetime

def get_server_data(ip, user, password):
    # Подключение к серверу по SSH
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(ip, username=user, password=password, timeout=10)
        
        # Сбор данных о системе
        stdin, stdout, stderr = client.exec_command("lscpu | grep 'Model name' | awk -F ': ' '{print $2}'")
        cpu_model = stdout.read().decode().strip()

        stdin, stdout, stderr = client.exec_command("lscpu | grep 'CPU MHz' | awk -F ': ' '{print $2}'")
        cpu_freq = stdout.read().decode().strip()

        stdin, stdout, stderr = client.exec_command("lscpu | grep '^CPU(s):' | awk -F ': ' '{print $2}'")
        cpu_cores = stdout.read().decode().strip()

        stdin, stdout, stderr = client.exec_command("free -m | grep Mem | awk '{print $2}'")
        ram = stdout.read().decode().strip() + " MB"

        stdin, stdout, stderr = client.exec_command("df -h / | grep '/' | awk '{print $4}'")
        disk_space = stdout.read().decode().strip()

        # Получение средней скорости пропускной способности и пинга до Стамбула
        bandwidth_speed = subprocess.check_output(f"iperf3 -c {ip} -p 5201", shell=True).decode().strip()
        ping_to_istanbul = subprocess.check_output(f"ping -c 4 {ip} | tail -1 | awk -F '/' '{{print $5}}'", shell=True).decode().strip()
        
        client.close()
        
        return {
            "IP": ip,
            "CPU Model": cpu_model,
            "CPU Frequency": f"{cpu_freq} MHz",
            "CPU Cores": int(cpu_cores),
            "RAM": ram,
            "Disk Space Available": disk_space,
            "Bandwidth Speed": bandwidth_speed,
            "Ping to Istanbul": f"{ping_to_istanbul} ms"
        }
    except Exception as e:
        print(f"Ошибка подключения к {ip}: {e}")
        return None

def classify_server(data):
    # Критерии для классификации
    if data and int(data["CPU Cores"]) >= 8 and int(data["RAM"].split()[0]) >= 16000:
        return "Strong"
    else:
        return "Weak"

def main():
    strong_servers = []
    weak_servers = []

    with open('servers.txt') as f:
        servers = [line.strip().split(':') for line in f if line.strip()]

    for ip, user, password in servers:
        server_data = get_server_data(ip, user, password)
        if server_data:
            category = classify_server(server_data)
            if category == "Strong":
                strong_servers.append(server_data)
            else:
                weak_servers.append(server_data)

    # Создание Excel файла
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    output_file = f"Server_Classification_{timestamp}.xlsx"
    
    with pd.ExcelWriter(output_file) as writer:
        pd.DataFrame(strong_servers).to_excel(writer, sheet_name="Strong Servers", index=False)
        pd.DataFrame(weak_servers).to_excel(writer, sheet_name="Weak Servers", index=False)

    print(f"Данные успешно сохранены в {output_file}")

if __name__ == "__main__":
    main()
